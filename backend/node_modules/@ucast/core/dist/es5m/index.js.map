{"version":3,"file":"index.js","sources":["../../src/Condition.ts","../../src/interpreter.ts","../../src/translator.ts","../../src/utils.ts","../../src/builder.ts","../../src/parsers/defaultInstructionParsers.ts","../../src/parsers/ObjectQueryParser.ts"],"sourcesContent":["export interface Note<T> {\n  type: string\n  message?: string\n  originalValue?: T\n}\n\nexport abstract class Condition<T = unknown> {\n  private _notes!: Note<T>[];\n\n  constructor(\n    public readonly operator: string,\n    public readonly value: T\n  ) {\n    Object.defineProperty(this, '_notes', {\n      writable: true\n    });\n  }\n\n  get notes(): ReadonlyArray<Note<T>> | undefined {\n    return this._notes;\n  }\n\n  addNote(note: Note<T>) {\n    this._notes = this._notes || [];\n    this._notes.push(note);\n  }\n}\n\nexport class DocumentCondition<T> extends Condition<T> {\n}\n\nexport class CompoundCondition<T extends Condition = Condition> extends DocumentCondition<T[]> {\n  constructor(operator: string, conditions: T[]) {\n    if (!Array.isArray(conditions)) {\n      throw new Error(`\"${operator}\" operator expects to receive an array of conditions`);\n    }\n\n    super(operator, conditions);\n  }\n}\n\nexport const ITSELF = '__itself__';\nexport class FieldCondition<T = unknown> extends Condition<T> {\n  public readonly field!: string | typeof ITSELF;\n\n  constructor(operator: string, field: string | typeof ITSELF, value: T) {\n    super(operator, value);\n    this.field = field;\n  }\n}\n\nexport const NULL_CONDITION = new DocumentCondition('__null__', null);\nexport type ConditionValue<T> = T extends Condition<infer V> ? V : unknown;\n","import { Condition } from './Condition';\n\ntype ArgsExceptLast<F extends (...args: any[]) => any> =\n  F extends (a: any, c: any) => any\n    ? Parameters<(condition: Condition) => 0>\n    : F extends (a: any, b: any, c: any) => any\n      ? Parameters<(condition: Condition, value: Parameters<F>[1]) => 0>\n      : Parameters<(\n        condition: Condition,\n        value: Parameters<F>[1],\n        options: Parameters<F>[2],\n        ...args: unknown[]\n      ) => 0>;\n\nexport type Interpreter<T extends Condition, R> = (condition: T, ...args: any[]) => R;\nexport type AnyInterpreter = Interpreter<any, any>;\nexport interface InterpretationContext<T extends AnyInterpreter> {\n  interpret(...args: ArgsExceptLast<T>): ReturnType<T>;\n}\n\nfunction getInterpreter<T extends Record<string, AnyInterpreter>>(\n  interpreters: T,\n  operator: keyof T\n) {\n  const interpret = interpreters[operator];\n\n  if (typeof interpret !== 'function') {\n    throw new Error(`Unable to interpret \"${operator}\" condition. Did you forget to register interpreter for it?`);\n  }\n\n  return interpret;\n}\n\nexport interface InterpreterOptions {\n  numberOfArguments?: 1 | 2 | 3\n  getInterpreterName?(condition: Condition, context: this): string\n}\n\nfunction defaultInterpreterName(condition: Condition) {\n  return condition.operator;\n}\n\nexport function createInterpreter<T extends AnyInterpreter, U extends {} = {}>(\n  interpreters: Record<string, T>,\n  rawOptions?: U\n) {\n  const options = rawOptions as U & InterpreterOptions;\n  const getInterpreterName = options && options.getInterpreterName || defaultInterpreterName;\n  let interpret;\n\n  switch (options ? options.numberOfArguments : 0) {\n    case 1:\n      interpret = ((condition) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    case 3:\n      interpret = ((condition, value, params) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, params, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n    default:\n      interpret = ((condition, value) => {\n        const interpreterName = getInterpreterName(condition, options);\n        const interpretOperator = getInterpreter(interpreters, interpreterName);\n        return interpretOperator(condition, value, defaultContext); // eslint-disable-line @typescript-eslint/no-use-before-define\n      }) as InterpretationContext<T>['interpret'];\n      break;\n  }\n\n  const defaultContext = {\n    ...options,\n    interpret,\n  } as InterpretationContext<T> & U;\n\n  return defaultContext.interpret;\n}\n","import { Condition } from './Condition';\nimport { Parse } from './types';\nimport { AnyInterpreter } from './interpreter';\n\ntype Bound<T> = T extends (first: Condition, ...args: infer A) => any\n  ? { (...args: A): ReturnType<T>, ast: Condition }\n  : never;\n\nexport function createTranslatorFactory<Lang, Interpreter extends AnyInterpreter>(\n  parse: Parse<Lang>,\n  interpret: Interpreter\n) {\n  return (query: Lang, ...args: unknown[]): Bound<Interpreter> => {\n    const ast = parse(query, ...args);\n    const translate = (interpret as any).bind(null, ast);\n    translate.ast = ast;\n    return translate;\n  };\n}\n","import { Condition, CompoundCondition } from './Condition';\n\nexport function isCompound(operator: string, condition: Condition): condition is CompoundCondition {\n  return condition instanceof CompoundCondition && condition.operator === operator;\n}\n\nfunction flattenConditions<T extends Condition>(\n  operator: string,\n  conditions: T[],\n  aggregatedResult?: T[]\n) {\n  const flatConditions: T[] = aggregatedResult || [];\n\n  for (let i = 0, length = conditions.length; i < length; i++) {\n    const currentNode = conditions[i];\n\n    if (isCompound(operator, currentNode)) {\n      flattenConditions(operator, currentNode.value as T[], flatConditions);\n    } else {\n      flatConditions.push(currentNode);\n    }\n  }\n\n  return flatConditions;\n}\n\nexport function optimizedCompoundCondition<T extends Condition>(operator: string, conditions: T[]) {\n  if (conditions.length === 1) {\n    return conditions[0];\n  }\n\n  return new CompoundCondition(operator, flattenConditions(operator, conditions));\n}\n\nexport const identity = <T>(x: T) => x;\n\nexport function hasOperators<T>(value: any, instructions: Record<string, unknown>): value is T {\n  if (!value || value && value.constructor !== Object) {\n    return false;\n  }\n\n  for (const prop in value) { // eslint-disable-line no-restricted-syntax\n    if (value.hasOwnProperty(prop) && instructions.hasOwnProperty(prop)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport const object = () => Object.create(null);\n","import { Condition } from './Condition';\nimport { optimizedCompoundCondition } from './utils';\n\nexport const buildAnd = (conditions: Condition[]) => optimizedCompoundCondition('and', conditions);\nexport const buildOr = (conditions: Condition[]) => optimizedCompoundCondition('or', conditions);\n","import {\n  Condition,\n  FieldCondition,\n  CompoundCondition,\n  DocumentCondition,\n} from '../Condition';\nimport {\n  DocumentInstruction,\n  CompoundInstruction,\n  FieldInstruction,\n  NamedInstruction,\n  ParsingContext,\n} from '../types';\n\ninterface DefaultParsers {\n  compound: Exclude<CompoundInstruction['parse'], undefined>,\n  field: Exclude<FieldInstruction['parse'], undefined>,\n  document: Exclude<DocumentInstruction['parse'], undefined>\n}\n\nexport const defaultInstructionParsers: DefaultParsers = {\n  compound(instruction, value, context) {\n    const queries = Array.isArray(value) ? value : [value];\n    const conditions = queries.map(query => context.parse(query));\n    return new CompoundCondition(instruction.name, conditions);\n  },\n  field(instruction, value, context) {\n    return new FieldCondition(instruction.name, context.field, value);\n  },\n  document(instruction, value) {\n    return new DocumentCondition(instruction.name, value);\n  }\n};\n\nexport function parseInstruction(\n  instruction: NamedInstruction,\n  value: unknown,\n  context: ParsingContext<{}>\n): Condition {\n  if (typeof instruction.validate === 'function') {\n    instruction.validate(instruction, value);\n  }\n\n  const parse: typeof instruction.parse = instruction.parse\n    || defaultInstructionParsers[instruction.type as keyof DefaultParsers];\n  return parse(instruction, value, context);\n}\n","import { Condition, NULL_CONDITION } from '../Condition';\nimport {\n  NamedInstruction,\n  ParsingInstruction,\n  FieldParsingContext,\n  ParsingContext,\n} from '../types';\nimport { buildAnd as and } from '../builder';\nimport { parseInstruction } from './defaultInstructionParsers';\nimport { identity, hasOperators, object } from '../utils';\n\nexport type FieldQueryOperators<T extends {}> = {\n  [K in keyof T]: T[K] extends {} ? T[K] : never\n}[keyof T];\n\ntype ParsingInstructions = Record<string, NamedInstruction>;\n\nexport interface QueryOptions {\n  operatorToConditionName?(name: string): string\n  defaultOperatorName?: string\n  fieldContext?: Record<string, unknown>\n  documentContext?: Record<string, unknown>\n}\n\nexport type ObjectQueryFieldParsingContext = ParsingContext<FieldParsingContext & {\n  query: {},\n  hasOperators<T>(value: unknown): value is T\n}>;\n\nexport class ObjectQueryParser<\n  T extends Record<any, any>,\n  U extends FieldQueryOperators<T> = FieldQueryOperators<T>\n> {\n  private readonly _instructions: ParsingInstructions;\n  private _fieldInstructionContext: ObjectQueryFieldParsingContext;\n  private _documentInstructionContext: ParsingContext<{ query: {} }>;\n  private readonly _options: Required<\n  Pick<QueryOptions, 'operatorToConditionName' | 'defaultOperatorName'>\n  >;\n\n  constructor(instructions: Record<string, ParsingInstruction>, options: QueryOptions = object()) {\n    this.parse = this.parse.bind(this);\n    this._options = {\n      operatorToConditionName: options.operatorToConditionName || identity,\n      defaultOperatorName: options.defaultOperatorName || 'eq',\n    };\n    this._instructions = Object.keys(instructions).reduce((all, name) => {\n      all[name] = { name: this._options.operatorToConditionName(name), ...instructions[name] };\n      return all;\n    }, {} as ParsingInstructions);\n    this._fieldInstructionContext = {\n      ...options.fieldContext,\n      field: '',\n      query: {},\n      parse: this.parse,\n      hasOperators: <T>(value: unknown): value is T => hasOperators(value, this._instructions),\n    };\n    this._documentInstructionContext = {\n      ...options.documentContext,\n      parse: this.parse,\n      query: {}\n    };\n  }\n\n  setParse(parse: this['parse']) {\n    this.parse = parse;\n    this._fieldInstructionContext.parse = parse;\n    this._documentInstructionContext.parse = parse;\n  }\n\n  protected parseField(field: string, operator: string, value: unknown, parentQuery: {}) {\n    const instruction = this._instructions[operator];\n\n    if (!instruction) {\n      throw new Error(`Unsupported operator \"${operator}\"`);\n    }\n\n    if (instruction.type !== 'field') {\n      throw new Error(`Unexpected ${instruction.type} operator \"${operator}\" at field level`);\n    }\n\n    this._fieldInstructionContext.field = field;\n    this._fieldInstructionContext.query = parentQuery;\n\n    return parseInstruction(instruction, value, this._fieldInstructionContext);\n  }\n\n  protected parseFieldOperators(field: string, value: U) {\n    const conditions: Condition[] = [];\n    const keys = Object.keys(value);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const op = keys[i];\n      const instruction = this._instructions[op];\n\n      if (!instruction) {\n        throw new Error(`Field query for \"${field}\" may contain only operators or a plain object as a value`);\n      }\n\n      const condition = this.parseField(field, op, value[op as keyof U], value);\n\n      if (condition !== NULL_CONDITION) {\n        conditions.push(condition);\n      }\n    }\n\n    return conditions;\n  }\n\n  parse<Q extends T>(query: Q): Condition {\n    const conditions = [];\n    const keys = Object.keys(query);\n\n    this._documentInstructionContext.query = query;\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      const value = query[key];\n      const instruction = this._instructions[key];\n\n      if (instruction) {\n        if (instruction.type !== 'document' && instruction.type !== 'compound') {\n          throw new Error(`Cannot use parsing instruction for operator \"${key}\" in \"document\" context as it is supposed to be used in  \"${instruction.type}\" context`);\n        }\n\n        conditions.push(parseInstruction(instruction, value, this._documentInstructionContext));\n      } else if (hasOperators<U>(value, this._instructions)) {\n        conditions.push(...this.parseFieldOperators(key, value));\n      } else {\n        conditions.push(this.parseField(key, this._options.defaultOperatorName, value, query));\n      }\n    }\n\n    return and(conditions);\n  }\n}\n"],"names":["Condition","operator","value","Object","defineProperty","this","writable","addNote","note","_notes","push","DocumentCondition","CompoundCondition","conditions","Array","isArray","Error","_DocumentCondition","ITSELF","FieldCondition","field","NULL_CONDITION","getInterpreter","interpreters","interpret","defaultInterpreterName","condition","createInterpreter","rawOptions","options","getInterpreterName","numberOfArguments","interpreterName","interpretOperator","defaultContext","params","createTranslatorFactory","parse","query","args","ast","translate","bind","isCompound","optimizedCompoundCondition","length","flattenConditions","aggregatedResult","flatConditions","i","currentNode","identity","x","hasOperators","instructions","constructor","prop","hasOwnProperty","object","create","buildAnd","buildOr","defaultInstructionParsers","compound","instruction","context","map","name","document","parseInstruction","validate","type","ObjectQueryParser","_instructions","_fieldInstructionContext","_documentInstructionContext","_options","operatorToConditionName","defaultOperatorName","keys","reduce","all","_this","fieldContext","documentContext","setParse","parseField","parentQuery","parseFieldOperators","op","key","and"],"mappings":"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"}